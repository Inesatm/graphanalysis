# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GraphAnalysis
                                 A QGIS plugin
 This plugin lets you visualize and manipulate spatial graphs.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-11-25
        git sha              : $Format:%H$
        copyright            : (C) 2018 by ISTIC
        email                : team.qgis@etudiant.univ-rennes1.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os.path
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, qDebug
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .graphAnalysis_dialog import GraphAnalysisDialog
from .graphAnalysis_layer import (GraphAnalysisLayer, GraphAnalysisLayerType)
from .graphAnalysis_selectTool import GraphSelectTool
from .model import *
from .graphReader import GraphReader

from qgis.core import QgsApplication, QgsMapLayer, QgsProject, QgsMessageLog


from . import utils

class GraphAnalysis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        self.iface = iface
        self.plugin_dir = os.path.dirname(__file__)

    def initGui(self):

        # Create actions
        self.actionAddLayer = QAction(
            QIcon(':/plugins/graphAnalysis/resources/logo.svg'),
            "Add a graph",
            self.iface.mainWindow())
        self.actionAddLayer.setObjectName(
            "GraphAnalysisLayerPlugin_AddLayer")
        self.actionAddLayer.triggered.connect(self.addLayer)

        self.actionSelectTool = QAction(
            QIcon(":/plugins/graphAnalysis/resources/logo-select.svg"),
            "Select Nodes or Edges",
            self.iface.mainWindow())
        self.actionSelectTool.setObjectName(
            "GraphAnalysisLayerPlugin_SelectTool")
        self.actionSelectTool.triggered.connect(self.selectTool)
        self.actionSelectTool.setCheckable(True)

        # Add toolbar button and menu item for AddLayer
        self.iface.layerToolBar().addAction(self.actionAddLayer)
        self.iface.insertAddLayerAction(self.actionAddLayer)


        # create toolbar for this plugin
        self.toolbar = self.iface.addToolBar("Graph Analysis")
        self.toolbar.addAction(self.actionAddLayer)
        self.toolbar.addAction(self.actionSelectTool)


        # Register plugin layer type
        self.layerType = GraphAnalysisLayerType(self)
        QgsApplication.pluginLayerRegistry().addPluginLayerType(self.layerType)

        self.dialogAddLayer = GraphAnalysisDialog()

        self.selectGraph = GraphSelectTool(self.iface)
        self.selectGraph.setAction(self.actionSelectTool)
        self.currentTool = None


    def unload(self):
        # Remove the plugin menu item and icon
        self.iface.layerToolBar().removeAction(self.actionAddLayer)
        self.iface.removeAddLayerAction(self.actionAddLayer)


        # Unregister plugin layer type
        QgsApplication.pluginLayerRegistry().removePluginLayerType(
            GraphAnalysisLayer.LAYER_TYPE)

        del self.toolbar

    def addLayer(self):
        self.dialogAddLayer.clear()
        self.dialogAddLayer.show()
        result = self.dialogAddLayer.exec_()
        if result == 1:
            self.createGraphAnalysisLayer()

    def createGraphAnalysisLayer(self):
        graphPath = self.dialogAddLayer.lineEditGraphPath.text()
        graphPath = utils.toRelativeToQGS(graphPath)

        graphName = os.path.basename(graphPath)
        graphName, _ = os.path.splitext(graphName)


        screenExtent = self.iface.mapCanvas().extent()

        layer = GraphAnalysisLayer(self, graphPath, graphName, screenExtent)
        if layer.isValid():
            QgsProject.instance().addMapLayer(layer)
            self.iface.setActiveLayer(layer)

    def selectTool(self):
        self.currentTool = self.selectGraph
        layer = self.iface.activeLayer()
        self.selectGraph.setLayer(layer)
        self.iface.mapCanvas().setMapTool(self.selectGraph)